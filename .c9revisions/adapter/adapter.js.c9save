{"ts":1375243518009,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1375243567928,"patch":[[{"diffs":[[1,"var RTCPeerConnection = null;\r\nvar getUserMedia = null;\r\nvar attachMediaStream = null;\r\nvar reattachMediaStream = null;\r\nvar webrtcDetectedBrowser = null;\r\nvar webrtcDetectedVersion = null;\r\n\r\nfunction trace(text) {\r\n  // This function is used for logging.\r\n  if (text[text.length - 1] == '\\n') {\r\n    text = text.substring(0, text.length - 1);\r\n  }\r\n  console.log((performance.now() / 1000).toFixed(3) + \": \" + text);\r\n}\r\n\r\nif (navigator.mozGetUserMedia) {\r\n  console.log(\"This appears to be Firefox\");\r\n\r\n  webrtcDetectedBrowser = \"firefox\";\r\n\r\n  webrtcDetectedVersion =\r\n                  parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1]);\r\n\r\n  // The RTCPeerConnection object.\r\n  RTCPeerConnection = mozRTCPeerConnection;\r\n\r\n  // The RTCSessionDescription object.\r\n  RTCSessionDescription = mozRTCSessionDescription;\r\n\r\n  // The RTCIceCandidate object.\r\n  RTCIceCandidate = mozRTCIceCandidate;\r\n\r\n  // Get UserMedia (only difference is the prefix).\r\n  // Code from Adam Barth.\r\n  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\r\n\r\n  // Creates iceServer from the url for FF.\r\n  createIceServer = function(url, username, password) {\r\n    var iceServer = null;\r\n    var url_parts = url.split(':');\r\n    if (url_parts[0].indexOf('stun') === 0) {\r\n      // Create iceServer with stun url.\r\n      iceServer = { 'url': url };\r\n    } else if (url_parts[0].indexOf('turn') === 0 &&\r\n               (url.indexOf('transport=udp') !== -1 ||\r\n                url.indexOf('?transport') === -1)) {\r\n      // Create iceServer with turn url.\r\n      // Ignore the transport parameter from TURN url.\r\n      var turn_url_parts = url.split(\"?\");\r\n      iceServer = { 'url': turn_url_parts[0],\r\n                    'credential': password,\r\n                    'username': username };\r\n    }\r\n    return iceServer;\r\n  };\r\n\r\n  // Attach a media stream to an element.\r\n  attachMediaStream = function(element, stream) {\r\n    console.log(\"Attaching media stream\");\r\n    element.mozSrcObject = stream;\r\n    element.play();\r\n  };\r\n\r\n  reattachMediaStream = function(to, from) {\r\n    console.log(\"Reattaching media stream\");\r\n    to.mozSrcObject = from.mozSrcObject;\r\n    to.play();\r\n  };\r\n\r\n  // Fake get{Video,Audio}Tracks\r\n  MediaStream.prototype.getVideoTracks = function() {\r\n    return [];\r\n  };\r\n\r\n  MediaStream.prototype.getAudioTracks = function() {\r\n    return [];\r\n  };\r\n} else if (navigator.webkitGetUserMedia) {\r\n  console.log(\"This appears to be Chrome\");\r\n\r\n  webrtcDetectedBrowser = \"chrome\";\r\n  webrtcDetectedVersion =\r\n             parseInt(navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)[2]);\r\n\r\n  // Creates iceServer from the url for Chrome.\r\n  createIceServer = function(url, username, password) {\r\n    var iceServer = null;\r\n    var url_parts = url.split(':');\r\n    if (url_parts[0].indexOf('stun') === 0) {\r\n      // Create iceServer with stun url.\r\n      iceServer = { 'url': url };\r\n    } else if (url_parts[0].indexOf('turn') === 0) {\r\n      if (webrtcDetectedVersion < 28) {\r\n        // For pre-M28 chrome versions use old TURN format.\r\n        var url_turn_parts = url.split(\"turn:\");\r\n        iceServer = { 'url': 'turn:' + username + '@' + url_turn_parts[1],\r\n                      'credential': password };\r\n      } else {\r\n        // For Chrome M28 & above use new TURN format.\r\n        iceServer = { 'url': url,\r\n                      'credential': password,\r\n                      'username': username };\r\n      }\r\n    }\r\n    return iceServer;\r\n  };\r\n\r\n  // The RTCPeerConnection object.\r\n  RTCPeerConnection = webkitRTCPeerConnection;\r\n\r\n  // Get UserMedia (only difference is the prefix).\r\n  // Code from Adam Barth.\r\n  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\r\n\r\n  // Attach a media stream to an element.\r\n  attachMediaStream = function(element, stream) {\r\n    if (typeof element.srcObject !== 'undefined') {\r\n      element.srcObject = stream;\r\n    } else if (typeof element.mozSrcObject !== 'undefined') {\r\n      element.mozSrcObject = stream;\r\n    } else if (typeof element.src !== 'undefined') {\r\n      element.src = URL.createObjectURL(stream);\r\n    } else {\r\n      console.log('Error attaching stream to element.');\r\n    }\r\n  };\r\n\r\n  reattachMediaStream = function(to, from) {\r\n    to.src = from.src;\r\n  };\r\n\r\n  // The representation of tracks in a stream is changed in M26.\r\n  // Unify them for earlier Chrome versions in the coexisting period.\r\n  if (!webkitMediaStream.prototype.getVideoTracks) {\r\n    webkitMediaStream.prototype.getVideoTracks = function() {\r\n      return this.videoTracks;\r\n    };\r\n    webkitMediaStream.prototype.getAudioTracks = function() {\r\n      return this.audioTracks;\r\n    };\r\n  }\r\n\r\n  // New syntax of getXXXStreams method in M26.\r\n  if (!webkitRTCPeerConnection.prototype.getLocalStreams) {\r\n    webkitRTCPeerConnection.prototype.getLocalStreams = function() {\r\n      return this.localStreams;\r\n    };\r\n    webkitRTCPeerConnection.prototype.getRemoteStreams = function() {\r\n      return this.remoteStreams;\r\n    };\r\n  }\r\n} else {\r\n  console.log(\"Browser does not appear to be WebRTC-capable\");\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":5094}]],"length":5094,"saved":false}
